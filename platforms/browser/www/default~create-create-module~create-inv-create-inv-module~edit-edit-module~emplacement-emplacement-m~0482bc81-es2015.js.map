{"version":3,"sources":["./src/app/crud.service.ts"],"names":[],"mappings":"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","file":"default~create-create-module~create-inv-create-inv-module~edit-edit-module~emplacement-emplacement-m~0482bc81-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Platform } from '@ionic/angular';\r\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class CrudService {\r\n  \r\n  private dbInstance: SQLiteObject;\r\n  readonly db_name: string = \"remotestack.db\";\r\n  readonly db_table: string = \"Product\";\r\n  readonly db_users: string = \"users\";\r\n   readonly db_emplacement: string = \"emplacement\";\r\n  readonly db_inventaire: string = \"Inventaire\";\r\n  readonly db_stock: string = \"Stock\";\r\n  Prodcuts: Array <any> ;\r\n  Inventaire :Array <any>;\r\n  Users : Array <any>;\r\n  Stocks : Array <any>;\r\n  Emplacements : Array <any> ;\r\n\r\n  constructor(\r\n    private platform: Platform,\r\n    private sqlite: SQLite   ,\r\n    private router: Router \r\n  ) { \r\n    this.databaseConn();\r\n  }\r\n\r\n    // Create SQLite database \r\n    databaseConn() {\r\n        this.platform.ready().then(() => {\r\n          this.sqlite.create({\r\n              name: this.db_name,\r\n              location: 'default'\r\n            }).then((sqLite: SQLiteObject) => {\r\n              this.dbInstance = sqLite;\r\n              sqLite.executeSql(`\r\n              CREATE TABLE IF NOT EXISTS ${this.db_table} (\r\n                product_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                material varchar(255),\r\n                description varchar(255),\r\n                cagette varchar(255),\r\n                UNIQUE (material)\r\n\r\n              )` ,    []) ,  \r\n               sqLite.executeSql(`\r\n              CREATE TABLE IF NOT EXISTS ${this.db_inventaire} (\r\n                id_inventaire INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                titre varchar(255),\r\n                date Date ,\r\n                type varchar(255),\r\n                UNIQUE (titre)\r\n\r\n              )` ,    []),\r\n               sqLite.executeSql(`\r\n              CREATE TABLE IF NOT EXISTS ${this.db_users} (\r\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                nom varchar(255),\r\n                prenom varchar(255),\r\n                username varchar(255),\r\n                email varchar(255),\r\n                password varchar(255),\r\n                telephone INTEGER, \r\n                role INTEGER,\r\n                UNIQUE (username , email ,telephone)\r\n\r\n              )`, []),\r\n               sqLite.executeSql(`\r\n              CREATE TABLE IF NOT EXISTS ${this.db_emplacement} (\r\n                id_emplacement INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                reference varchar(255),\r\n                rayon varchar(255),\r\n                qrcode varchar(255),\r\n                UNIQUE (reference , rayon , qrcode )\r\n\r\n              )`, []),\r\n              sqLite.executeSql(`\r\n              CREATE TABLE IF NOT EXISTS ${this.db_stock} (\r\n                stock_id INTEGER PRIMARY KEY AUTOINCREMENT, \r\n                material varchar(255),\r\n                Qphysique  INTEGER,\r\n                Qsap INTEGER  ,\r\n                ecart decimal(10, 4) ,\r\n                id_emplacement INTEGER ,\r\n                id_inventaire INTEGER ,\r\n                FOREIGN KEY(\"material\") REFERENCES \"Product\" ,\r\n                FOREIGN KEY(\"id_emplacement\") REFERENCES \"emplacement\" ,\r\n                FOREIGN KEY(\"id_inventaire\") REFERENCES \"Inventaire\",\r\n                UNIQUE (material) \r\n\r\n\r\n\r\n              )`, [])\r\n                .then((res) => {\r\n                   //alert(JSON.stringify(res));\r\n                })\r\n                .catch((error) => alert(JSON.stringify(error)));\r\n            })\r\n            .catch((error) => alert(JSON.stringify(error)));\r\n        });   \r\n    }\r\n\r\n    // Crud\r\n    public addProduct(n, e ,c) {\r\n      // validation\r\n      if (!n.length || !e.length  || !c.length ) { \r\n        alert('Provide both email & name');\r\n        return; \r\n      }\r\n      this.dbInstance.executeSql(`\r\n      INSERT INTO ${this.db_table} (material, description , cagette) VALUES ('${n}', '${e}' , '${c}')`, [])\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllProducts();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n    }\r\n\r\n      public addQuantite( id ,Qphysique ) {\r\n      let data = [Qphysique];\r\n     return this.dbInstance.executeSql(`\r\n      UPDATE ${this.db_stock}  SET Qphysique = ?  WHERE stock_id = ${id} `, data)\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllStock();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n    }\r\n\r\n    getAllProducts() {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_table}`, []).then((res) => {\r\n        this.Prodcuts = [];\r\n        if (res.rows.length > 0) {\r\n          for (var i = 0; i < res.rows.length; i++) {\r\n            this.Prodcuts.push(res.rows.item(i));\r\n          }\r\n          return this.Prodcuts;\r\n        }\r\n      },(e) => {\r\n        alert(JSON.stringify(e));\r\n      });\r\n    }\r\n\r\n    // Get user\r\n    getProduct(id): Promise<any> {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_table} WHERE product_id = ?`, [id])\r\n      .then((res) => { \r\n        return {\r\n          product_id: res.rows.item(0).product_id,\r\n          material: res.rows.item(0).material,  \r\n          description : res.rows.item(0).description,\r\n          cagette : res.rows.item(0).cagette,\r\n        }\r\n      });\r\n    }\r\n\r\n    // Update\r\n    updateProduct(id, material, description , cagette) {\r\n      let data = [material, description , cagette];\r\n      return this.dbInstance.executeSql(`UPDATE ${this.db_table} SET material = ?, description = ? , cagette = ? WHERE product_id = ${id}`, data)\r\n    }  \r\n\r\n    // Delete\r\n    deleteProduct(product) {\r\n      this.dbInstance.executeSql(`\r\n      DELETE FROM ${this.db_table} WHERE product_id = ${product}`, [])\r\n        .then(() => {\r\n          alert(\"produit deleted!\");\r\n          this.getAllProducts();\r\n        })\r\n        .catch(e => {\r\n          alert(JSON.stringify(e))\r\n        });\r\n    }\r\n    \r\n\r\n    public addInventai(n, e ,c) {\r\n    \r\n      this.dbInstance.executeSql(`\r\n      INSERT INTO ${this.db_inventaire} (titre, date , type) VALUES ('${n}', '${e}' , '${c}')`, [])\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllInvent();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n    }\r\n\r\n    getAllInvent() {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_inventaire}`, []).then((res) => {\r\n        this.Inventaire = [];\r\n        if (res.rows.length > 0) {\r\n          for (var i = 0; i < res.rows.length; i++) {\r\n            this.Inventaire.push(res.rows.item(i));\r\n          }\r\n          return this.Inventaire;\r\n        }\r\n      },(e) => {\r\n        alert(JSON.stringify(e));\r\n      });\r\n    }\r\n\r\n    // Get user\r\n    getInvent(id): Promise<any> {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_inventaire} WHERE inventaire_id = ?`, [id])\r\n      .then((res) => { \r\n        return {\r\n          inventaire_id: res.rows.item(0).inventaire_id,\r\n          titre: res.rows.item(0).titre,  \r\n          date : res.rows.item(0).date,\r\n          type : res.rows.item(0).type,\r\n        }\r\n      });\r\n    }\r\n\r\n    // Update\r\n    updateInvent(id, titre, date , type) {\r\n      let data = [titre, date , type];\r\n      return this.dbInstance.executeSql(`UPDATE ${this.db_inventaire} SET titre = ?, date = ? , type = ? WHERE inventaire_id = ${id}`, data)\r\n    }  \r\n\r\n    // Delete\r\n    deleteInevent(invent) {\r\n      this.dbInstance.executeSql(`\r\n      DELETE FROM ${this.db_inventaire} WHERE inventaire_id = ${invent}`, [])\r\n        .then(() => {\r\n          alert(\"inventaire deleted!\");\r\n          this.getAllInvent();\r\n        })\r\n        .catch(e => {\r\n          alert(JSON.stringify(e))\r\n        });\r\n    }\r\n\r\n\r\n\r\n    public addUser(n, p ,u , e ,pa , te , r ) {\r\n      // validation\r\n     \r\n      this.dbInstance.executeSql(`\r\n      INSERT INTO ${this.db_users} (nom, prenom , username , email , password ,telephone , role ) VALUES ('${n}', '${p}' , '${u}' , '${e}' , '${pa}', '${te}' ,  '${r}')`, [])\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllUsers();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n    }\r\n\r\n    getAllUsers() {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_users}`, []).then((res) => {\r\n        this.Users = [];\r\n        if (res.rows.length > 0) {\r\n          for (var i = 0; i < res.rows.length; i++) {\r\n            this.Users.push(res.rows.item(i));\r\n          }\r\n          return this.Users;\r\n        }\r\n      },(e) => {\r\n        alert(JSON.stringify(e));\r\n      });\r\n    }\r\n\r\n    // Get user\r\n    getUser(id): Promise<any> {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_users} WHERE user_id = ?`, [id])\r\n      .then((res) => { \r\n        return {\r\n          user_id: res.rows.item(0).user_id,\r\n          nom: res.rows.item(0).nom,  \r\n          prenom : res.rows.item(0).prenom,\r\n          username : res.rows.item(0).username,\r\n          email : res.rows.item(0).email,\r\n          password : res.rows.item(0).password,\r\n          telephone : res.rows.item(0).telephone,\r\n          role : res.rows.item(0).role,\r\n          \r\n\r\n        }\r\n      });\r\n    }\r\n\r\n    // Update\r\n    updateUser(id, nom, prenom , username , email, password , tele , role) {\r\n      let data = [nom, prenom ,username, email, password, tele , role];\r\n      return this.dbInstance.executeSql(`UPDATE ${this.db_users} SET nom = ?, prenom= ? , username = ? , email =? , password =? , telephone =? ,role =? WHERE user_id = ${id}`, data)\r\n    }  \r\n\r\n    // Delete\r\n    deleteUser(user) {\r\n      this.dbInstance.executeSql(`\r\n      DELETE FROM ${this.db_users} WHERE product_id = ${user}`, [])\r\n        .then(() => {\r\n          alert(\"User deleted!\");\r\n          this.getAllUsers();\r\n        })\r\n        .catch(e => {\r\n          alert(JSON.stringify(e))\r\n        });\r\n    }\r\n\r\n\r\n\r\nasync login( username: string , password :string ){\r\n\r\n      return this.dbInstance.executeSql('SELECT * FROM users', []).then(data => {\r\n        \r\n   \r\n        if (data.rows.length > 0) {\r\n          for (var i = 0; i < data.rows.length; i++) {\r\n            \r\n            if (data.rows.item(i).username != '' && data.rows.item(i).username == username && data.rows.item(i).username == username && data.rows.item(i).password == password && data.rows.item(i).password != '' && data.rows.item(i).role == 0  ) {\r\n            \r\n                this.router.navigate(['/menu']);\r\n            }\r\n            else if(data.rows.item(i).username != '' && data.rows.item(i).username == username && data.rows.item(i).username == username && data.rows.item(i).password == password && data.rows.item(i).password != '' && data.rows.item(i).role == 1  ){\r\n              this.router.navigate(['/create']);\r\n  \r\n          }\r\n          else if(data.rows.item(i).username != '' && data.rows.item(i).username == username && data.rows.item(i).username == username && data.rows.item(i).password == password && data.rows.item(i).password != '' && data.rows.item(i).role == 2 ){\r\n            this.router.navigate(['/inventaire']);\r\n  \r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  getProductMaterial(qrcode :  string ){\r\n      return this.dbInstance.executeSql(` SELECT s.Qphysique as Qphysique , s.stock_id as stock_id  ,e.qrcode as qrcode , s.material AS material  , p.description  FROM  Stock s , emplacement e , Product p\r\n      where e.id_emplacement = s.id_emplacement and s.material=p.material and e.qrcode = ?  `, [qrcode])\r\n      .then((res) => { \r\n        return {\r\n          material: res.rows.item(0).material,\r\n          description: res.rows.item(0).description,  \r\n          qrcode : res.rows.item(0).qrcode,\r\n          stock_id : res.rows.item(0).stock_id,\r\n          Qphysique : res.rows.item(0).Qphysique,\r\n          \r\n        }\r\n      });\r\n\r\n    \r\n  }\r\n\r\n\r\n\r\n\r\n public addStock(n, p ,u , e ,pa , te ) {\r\n      // validation\r\n     \r\n      this.dbInstance.executeSql(`\r\n      INSERT INTO ${this.db_stock} (material, Qphysique , Qsap , ecart , id_emplacement ,id_inventaire  ) VALUES ('${n}', '${p}' , '${u}' , '${e}' , '${pa}', '${te}' )`, [])\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllStock();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n    }\r\n\r\n     getAllStock() {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_stock}`, []).then((res) => {\r\n        this.Stocks = [];\r\n        if (res.rows.length > 0) {\r\n          for (var i = 0; i < res.rows.length; i++) {\r\n            this.Stocks.push(res.rows.item(i));\r\n          }\r\n          return this.Stocks;\r\n        }\r\n      },(e) => {\r\n        alert(JSON.stringify(e));\r\n      });\r\n    }\r\n\r\n      getStock(id): Promise<any> {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_stock} WHERE stock_id = ?`, [id])\r\n      .then((res) => { \r\n        return {\r\n          stock_id: res.rows.item(0).stock_id,\r\n          material: res.rows.item(0).material,  \r\n          Qphysique : res.rows.item(0).Qphysique,\r\n          Qsap : res.rows.item(0).Qphysique,\r\n          ecart : res.rows.item(0).ecart,\r\n          id_emplacement : res.rows.item(0).id_emplacement,\r\n          id_inventaire : res.rows.item(0).id_inventaire,\r\n          \r\n          \r\n\r\n        }\r\n      });\r\n    }\r\n\r\n     updateStock(id,material, Qphysique , Qsap , ecart, id_emplacement, id_inventaire ) {\r\n      let data = [material, Qphysique ,Qsap, ecart, id_emplacement, id_inventaire];\r\n      return this.dbInstance.executeSql(`UPDATE ${this.db_stock} SET material = ?, Qphysique= ? , Qsap = ? , ecart =? , id_emplacement =? , id_inventaire =?  WHERE stock_id = ${id}`, data)\r\n    } \r\n\r\n\r\n\r\n    deleteStock(stock) {\r\n      this.dbInstance.executeSql(`\r\n      DELETE FROM ${this.db_stock} WHERE stock_id = ${stock}`, [])\r\n        .then(() => {\r\n          alert(\"stock deleted!\");\r\n          this.getAllStock();\r\n        })\r\n        .catch(e => {\r\n          alert(JSON.stringify(e))\r\n        });\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n      public addEmplacement(n, e ,c) {\r\n     \r\n      this.dbInstance.executeSql(`\r\n      INSERT INTO ${this.db_emplacement} (reference, rayon , qrcode) VALUES ('${n}', '${e}' , '${c}')`, [])\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllEmplacement();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n        \r\n    }\r\n\r\n     \r\n\r\n    getAllEmplacement() {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_emplacement}`, []).then((res) => {\r\n        this.Emplacements = [];\r\n        if (res.rows.length > 0) {\r\n          for (var i = 0; i < res.rows.length; i++) {\r\n            this.Emplacements.push(res.rows.item(i));\r\n          }\r\n          return this.Emplacements;\r\n        }\r\n      },(e) => {\r\n        alert(JSON.stringify(e));\r\n      });\r\n    }\r\n\r\n    // Get user\r\n    getEmplacement(id): Promise<any> {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_emplacement} WHERE id_emplacement = ?`, [id])\r\n      .then((res) => { \r\n        return {\r\n          id_emplacement: res.rows.item(0).id_emplacement,\r\n          reference: res.rows.item(0).reference,  \r\n          rayon : res.rows.item(0).rayon,\r\n          qrcode : res.rows.item(0).qrcode,\r\n        }\r\n      });\r\n    }\r\n\r\n    // Update\r\n    updateEmplacement(id, reference, rayon , qrcode) {\r\n      let data = [reference, rayon , qrcode];\r\n      return this.dbInstance.executeSql(`UPDATE ${this.db_emplacement} SET reference = ?, rayon = ? , qrcode = ? WHERE id_emplacement = ${id}`, data)\r\n    }  \r\n\r\n    // Delete\r\n    deleteEmplacement(emplacement) {\r\n      this.dbInstance.executeSql(`\r\n      DELETE FROM ${this.db_emplacement} WHERE id_emplacement = ${emplacement}`, [])\r\n        .then(() => {\r\n          alert(\"emplacement deleted!\");\r\n          this.getAllEmplacement();\r\n        })\r\n        .catch(e => {\r\n          alert(JSON.stringify(e))\r\n        });\r\n    }\r\n    \r\n\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}