{"version":3,"sources":["webpack:///src/app/crud.service.ts"],"names":["CrudService","platform","sqlite","router","db_name","db_table","db_users","db_emplacement","db_inventaire","db_stock","databaseConn","ready","then","create","name","location","sqLite","dbInstance","executeSql","res","error","alert","JSON","stringify","n","e","c","length","getAllProducts","err","id","Qphysique","data","getAllStock","Prodcuts","rows","i","push","item","product_id","material","description","cagette","product","getAllInvent","Inventaire","inventaire_id","titre","date","type","invent","p","u","pa","te","r","getAllUsers","Users","user_id","nom","prenom","username","email","password","telephone","role","tele","user","navigate","qrcode","stock_id","Stocks","Qsap","ecart","id_emplacement","id_inventaire","stock","getAllEmplacement","Emplacements","reference","rayon","emplacement","providedIn"],"mappings":"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","file":"default~create-create-module~create-inv-create-inv-module~edit-edit-module~emplacement-emplacement-m~0482bc81-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Platform } from '@ionic/angular';\r\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class CrudService {\r\n  \r\n  private dbInstance: SQLiteObject;\r\n  readonly db_name: string = \"remotestack.db\";\r\n  readonly db_table: string = \"Product\";\r\n  readonly db_users: string = \"users\";\r\n   readonly db_emplacement: string = \"emplacement\";\r\n  readonly db_inventaire: string = \"Inventaire\";\r\n  readonly db_stock: string = \"Stock\";\r\n  Prodcuts: Array <any> ;\r\n  Inventaire :Array <any>;\r\n  Users : Array <any>;\r\n  Stocks : Array <any>;\r\n  Emplacements : Array <any> ;\r\n\r\n  constructor(\r\n    private platform: Platform,\r\n    private sqlite: SQLite   ,\r\n    private router: Router \r\n  ) { \r\n    this.databaseConn();\r\n  }\r\n\r\n    // Create SQLite database \r\n    databaseConn() {\r\n        this.platform.ready().then(() => {\r\n          this.sqlite.create({\r\n              name: this.db_name,\r\n              location: 'default'\r\n            }).then((sqLite: SQLiteObject) => {\r\n              this.dbInstance = sqLite;\r\n              sqLite.executeSql(`\r\n              CREATE TABLE IF NOT EXISTS ${this.db_table} (\r\n                product_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                material varchar(255),\r\n                description varchar(255),\r\n                cagette varchar(255),\r\n                UNIQUE (material)\r\n\r\n              )` ,    []) ,  \r\n               sqLite.executeSql(`\r\n              CREATE TABLE IF NOT EXISTS ${this.db_inventaire} (\r\n                id_inventaire INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                titre varchar(255),\r\n                date Date ,\r\n                type varchar(255),\r\n                UNIQUE (titre)\r\n\r\n              )` ,    []),\r\n               sqLite.executeSql(`\r\n              CREATE TABLE IF NOT EXISTS ${this.db_users} (\r\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                nom varchar(255),\r\n                prenom varchar(255),\r\n                username varchar(255),\r\n                email varchar(255),\r\n                password varchar(255),\r\n                telephone INTEGER, \r\n                role INTEGER,\r\n                UNIQUE (username , email ,telephone)\r\n\r\n              )`, []),\r\n               sqLite.executeSql(`\r\n              CREATE TABLE IF NOT EXISTS ${this.db_emplacement} (\r\n                id_emplacement INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                reference varchar(255),\r\n                rayon varchar(255),\r\n                qrcode varchar(255),\r\n                UNIQUE (reference , rayon , qrcode )\r\n\r\n              )`, []),\r\n              sqLite.executeSql(`\r\n              CREATE TABLE IF NOT EXISTS ${this.db_stock} (\r\n                stock_id INTEGER PRIMARY KEY AUTOINCREMENT, \r\n                material varchar(255),\r\n                Qphysique  INTEGER,\r\n                Qsap INTEGER  ,\r\n                ecart decimal(10, 4) ,\r\n                id_emplacement INTEGER ,\r\n                id_inventaire INTEGER ,\r\n                FOREIGN KEY(\"material\") REFERENCES \"Product\" ,\r\n                FOREIGN KEY(\"id_emplacement\") REFERENCES \"emplacement\" ,\r\n                FOREIGN KEY(\"id_inventaire\") REFERENCES \"Inventaire\",\r\n                UNIQUE (material) \r\n\r\n\r\n\r\n              )`, [])\r\n                .then((res) => {\r\n                   //alert(JSON.stringify(res));\r\n                })\r\n                .catch((error) => alert(JSON.stringify(error)));\r\n            })\r\n            .catch((error) => alert(JSON.stringify(error)));\r\n        });   \r\n    }\r\n\r\n    // Crud\r\n    public addProduct(n, e ,c) {\r\n      // validation\r\n      if (!n.length || !e.length  || !c.length ) { \r\n        alert('Provide both email & name');\r\n        return; \r\n      }\r\n      this.dbInstance.executeSql(`\r\n      INSERT INTO ${this.db_table} (material, description , cagette) VALUES ('${n}', '${e}' , '${c}')`, [])\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllProducts();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n    }\r\n\r\n      public addQuantite( id ,Qphysique ) {\r\n      let data = [Qphysique];\r\n     return this.dbInstance.executeSql(`\r\n      UPDATE ${this.db_stock}  SET Qphysique = ?  WHERE stock_id = ${id} `, data)\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllStock();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n    }\r\n\r\n    getAllProducts() {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_table}`, []).then((res) => {\r\n        this.Prodcuts = [];\r\n        if (res.rows.length > 0) {\r\n          for (var i = 0; i < res.rows.length; i++) {\r\n            this.Prodcuts.push(res.rows.item(i));\r\n          }\r\n          return this.Prodcuts;\r\n        }\r\n      },(e) => {\r\n        alert(JSON.stringify(e));\r\n      });\r\n    }\r\n\r\n    // Get user\r\n    getProduct(id): Promise<any> {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_table} WHERE product_id = ?`, [id])\r\n      .then((res) => { \r\n        return {\r\n          product_id: res.rows.item(0).product_id,\r\n          material: res.rows.item(0).material,  \r\n          description : res.rows.item(0).description,\r\n          cagette : res.rows.item(0).cagette,\r\n        }\r\n      });\r\n    }\r\n\r\n    // Update\r\n    updateProduct(id, material, description , cagette) {\r\n      let data = [material, description , cagette];\r\n      return this.dbInstance.executeSql(`UPDATE ${this.db_table} SET material = ?, description = ? , cagette = ? WHERE product_id = ${id}`, data)\r\n    }  \r\n\r\n    // Delete\r\n    deleteProduct(product) {\r\n      this.dbInstance.executeSql(`\r\n      DELETE FROM ${this.db_table} WHERE product_id = ${product}`, [])\r\n        .then(() => {\r\n          alert(\"produit deleted!\");\r\n          this.getAllProducts();\r\n        })\r\n        .catch(e => {\r\n          alert(JSON.stringify(e))\r\n        });\r\n    }\r\n    \r\n\r\n    public addInventai(n, e ,c) {\r\n    \r\n      this.dbInstance.executeSql(`\r\n      INSERT INTO ${this.db_inventaire} (titre, date , type) VALUES ('${n}', '${e}' , '${c}')`, [])\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllInvent();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n    }\r\n\r\n    getAllInvent() {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_inventaire}`, []).then((res) => {\r\n        this.Inventaire = [];\r\n        if (res.rows.length > 0) {\r\n          for (var i = 0; i < res.rows.length; i++) {\r\n            this.Inventaire.push(res.rows.item(i));\r\n          }\r\n          return this.Inventaire;\r\n        }\r\n      },(e) => {\r\n        alert(JSON.stringify(e));\r\n      });\r\n    }\r\n\r\n    // Get user\r\n    getInvent(id): Promise<any> {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_inventaire} WHERE inventaire_id = ?`, [id])\r\n      .then((res) => { \r\n        return {\r\n          inventaire_id: res.rows.item(0).inventaire_id,\r\n          titre: res.rows.item(0).titre,  \r\n          date : res.rows.item(0).date,\r\n          type : res.rows.item(0).type,\r\n        }\r\n      });\r\n    }\r\n\r\n    // Update\r\n    updateInvent(id, titre, date , type) {\r\n      let data = [titre, date , type];\r\n      return this.dbInstance.executeSql(`UPDATE ${this.db_inventaire} SET titre = ?, date = ? , type = ? WHERE inventaire_id = ${id}`, data)\r\n    }  \r\n\r\n    // Delete\r\n    deleteInevent(invent) {\r\n      this.dbInstance.executeSql(`\r\n      DELETE FROM ${this.db_inventaire} WHERE inventaire_id = ${invent}`, [])\r\n        .then(() => {\r\n          alert(\"inventaire deleted!\");\r\n          this.getAllInvent();\r\n        })\r\n        .catch(e => {\r\n          alert(JSON.stringify(e))\r\n        });\r\n    }\r\n\r\n\r\n\r\n    public addUser(n, p ,u , e ,pa , te , r ) {\r\n      // validation\r\n     \r\n      this.dbInstance.executeSql(`\r\n      INSERT INTO ${this.db_users} (nom, prenom , username , email , password ,telephone , role ) VALUES ('${n}', '${p}' , '${u}' , '${e}' , '${pa}', '${te}' ,  '${r}')`, [])\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllUsers();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n    }\r\n\r\n    getAllUsers() {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_users}`, []).then((res) => {\r\n        this.Users = [];\r\n        if (res.rows.length > 0) {\r\n          for (var i = 0; i < res.rows.length; i++) {\r\n            this.Users.push(res.rows.item(i));\r\n          }\r\n          return this.Users;\r\n        }\r\n      },(e) => {\r\n        alert(JSON.stringify(e));\r\n      });\r\n    }\r\n\r\n    // Get user\r\n    getUser(id): Promise<any> {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_users} WHERE user_id = ?`, [id])\r\n      .then((res) => { \r\n        return {\r\n          user_id: res.rows.item(0).user_id,\r\n          nom: res.rows.item(0).nom,  \r\n          prenom : res.rows.item(0).prenom,\r\n          username : res.rows.item(0).username,\r\n          email : res.rows.item(0).email,\r\n          password : res.rows.item(0).password,\r\n          telephone : res.rows.item(0).telephone,\r\n          role : res.rows.item(0).role,\r\n          \r\n\r\n        }\r\n      });\r\n    }\r\n\r\n    // Update\r\n    updateUser(id, nom, prenom , username , email, password , tele , role) {\r\n      let data = [nom, prenom ,username, email, password, tele , role];\r\n      return this.dbInstance.executeSql(`UPDATE ${this.db_users} SET nom = ?, prenom= ? , username = ? , email =? , password =? , telephone =? ,role =? WHERE user_id = ${id}`, data)\r\n    }  \r\n\r\n    // Delete\r\n    deleteUser(user) {\r\n      this.dbInstance.executeSql(`\r\n      DELETE FROM ${this.db_users} WHERE product_id = ${user}`, [])\r\n        .then(() => {\r\n          alert(\"User deleted!\");\r\n          this.getAllUsers();\r\n        })\r\n        .catch(e => {\r\n          alert(JSON.stringify(e))\r\n        });\r\n    }\r\n\r\n\r\n\r\nasync login( username: string , password :string ){\r\n\r\n      return this.dbInstance.executeSql('SELECT * FROM users', []).then(data => {\r\n        \r\n   \r\n        if (data.rows.length > 0) {\r\n          for (var i = 0; i < data.rows.length; i++) {\r\n            \r\n            if (data.rows.item(i).username != '' && data.rows.item(i).username == username && data.rows.item(i).username == username && data.rows.item(i).password == password && data.rows.item(i).password != '' && data.rows.item(i).role == 0  ) {\r\n            \r\n                this.router.navigate(['/menu']);\r\n            }\r\n            else if(data.rows.item(i).username != '' && data.rows.item(i).username == username && data.rows.item(i).username == username && data.rows.item(i).password == password && data.rows.item(i).password != '' && data.rows.item(i).role == 1  ){\r\n              this.router.navigate(['/create']);\r\n  \r\n          }\r\n          else if(data.rows.item(i).username != '' && data.rows.item(i).username == username && data.rows.item(i).username == username && data.rows.item(i).password == password && data.rows.item(i).password != '' && data.rows.item(i).role == 2 ){\r\n            this.router.navigate(['/inventaire']);\r\n  \r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  getProductMaterial(qrcode :  string ){\r\n      return this.dbInstance.executeSql(` SELECT s.Qphysique as Qphysique , s.stock_id as stock_id  ,e.qrcode as qrcode , s.material AS material  , p.description  FROM  Stock s , emplacement e , Product p\r\n      where e.id_emplacement = s.id_emplacement and s.material=p.material and e.qrcode = ?  `, [qrcode])\r\n      .then((res) => { \r\n        return {\r\n          material: res.rows.item(0).material,\r\n          description: res.rows.item(0).description,  \r\n          qrcode : res.rows.item(0).qrcode,\r\n          stock_id : res.rows.item(0).stock_id,\r\n          Qphysique : res.rows.item(0).Qphysique,\r\n          \r\n        }\r\n      });\r\n\r\n    \r\n  }\r\n\r\n\r\n\r\n\r\n public addStock(n, p ,u , e ,pa , te ) {\r\n      // validation\r\n     \r\n      this.dbInstance.executeSql(`\r\n      INSERT INTO ${this.db_stock} (material, Qphysique , Qsap , ecart , id_emplacement ,id_inventaire  ) VALUES ('${n}', '${p}' , '${u}' , '${e}' , '${pa}', '${te}' )`, [])\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllStock();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n    }\r\n\r\n     getAllStock() {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_stock}`, []).then((res) => {\r\n        this.Stocks = [];\r\n        if (res.rows.length > 0) {\r\n          for (var i = 0; i < res.rows.length; i++) {\r\n            this.Stocks.push(res.rows.item(i));\r\n          }\r\n          return this.Stocks;\r\n        }\r\n      },(e) => {\r\n        alert(JSON.stringify(e));\r\n      });\r\n    }\r\n\r\n      getStock(id): Promise<any> {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_stock} WHERE stock_id = ?`, [id])\r\n      .then((res) => { \r\n        return {\r\n          stock_id: res.rows.item(0).stock_id,\r\n          material: res.rows.item(0).material,  \r\n          Qphysique : res.rows.item(0).Qphysique,\r\n          Qsap : res.rows.item(0).Qphysique,\r\n          ecart : res.rows.item(0).ecart,\r\n          id_emplacement : res.rows.item(0).id_emplacement,\r\n          id_inventaire : res.rows.item(0).id_inventaire,\r\n          \r\n          \r\n\r\n        }\r\n      });\r\n    }\r\n\r\n     updateStock(id,material, Qphysique , Qsap , ecart, id_emplacement, id_inventaire ) {\r\n      let data = [material, Qphysique ,Qsap, ecart, id_emplacement, id_inventaire];\r\n      return this.dbInstance.executeSql(`UPDATE ${this.db_stock} SET material = ?, Qphysique= ? , Qsap = ? , ecart =? , id_emplacement =? , id_inventaire =?  WHERE stock_id = ${id}`, data)\r\n    } \r\n\r\n\r\n\r\n    deleteStock(stock) {\r\n      this.dbInstance.executeSql(`\r\n      DELETE FROM ${this.db_stock} WHERE stock_id = ${stock}`, [])\r\n        .then(() => {\r\n          alert(\"stock deleted!\");\r\n          this.getAllStock();\r\n        })\r\n        .catch(e => {\r\n          alert(JSON.stringify(e))\r\n        });\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n      public addEmplacement(n, e ,c) {\r\n     \r\n      this.dbInstance.executeSql(`\r\n      INSERT INTO ${this.db_emplacement} (reference, rayon , qrcode) VALUES ('${n}', '${e}' , '${c}')`, [])\r\n        .then(() => {\r\n          alert(\"Success\");\r\n          this.getAllEmplacement();\r\n        }, (e) => {\r\n          alert(JSON.stringify(e.err));\r\n        });\r\n        \r\n    }\r\n\r\n     \r\n\r\n    getAllEmplacement() {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_emplacement}`, []).then((res) => {\r\n        this.Emplacements = [];\r\n        if (res.rows.length > 0) {\r\n          for (var i = 0; i < res.rows.length; i++) {\r\n            this.Emplacements.push(res.rows.item(i));\r\n          }\r\n          return this.Emplacements;\r\n        }\r\n      },(e) => {\r\n        alert(JSON.stringify(e));\r\n      });\r\n    }\r\n\r\n    // Get user\r\n    getEmplacement(id): Promise<any> {\r\n      return this.dbInstance.executeSql(`SELECT * FROM ${this.db_emplacement} WHERE id_emplacement = ?`, [id])\r\n      .then((res) => { \r\n        return {\r\n          id_emplacement: res.rows.item(0).id_emplacement,\r\n          reference: res.rows.item(0).reference,  \r\n          rayon : res.rows.item(0).rayon,\r\n          qrcode : res.rows.item(0).qrcode,\r\n        }\r\n      });\r\n    }\r\n\r\n    // Update\r\n    updateEmplacement(id, reference, rayon , qrcode) {\r\n      let data = [reference, rayon , qrcode];\r\n      return this.dbInstance.executeSql(`UPDATE ${this.db_emplacement} SET reference = ?, rayon = ? , qrcode = ? WHERE id_emplacement = ${id}`, data)\r\n    }  \r\n\r\n    // Delete\r\n    deleteEmplacement(emplacement) {\r\n      this.dbInstance.executeSql(`\r\n      DELETE FROM ${this.db_emplacement} WHERE id_emplacement = ${emplacement}`, [])\r\n        .then(() => {\r\n          alert(\"emplacement deleted!\");\r\n          this.getAllEmplacement();\r\n        })\r\n        .catch(e => {\r\n          alert(JSON.stringify(e))\r\n        });\r\n    }\r\n    \r\n\r\n\r\n}\r\n"]}